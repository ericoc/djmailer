# Generated by Django 4.2.7 on 2023-11-30 23:26

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='WidgetGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
            ],
            options={
                'verbose_name': 'Group',
                'db_table': 'groups',
                'db_table_comment': 'Groups.',
                'ordering': ('name',),
                'managed': True,
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='WidgetUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('id', models.AutoField(help_text='User identification number.', primary_key=True, serialize=False, verbose_name='User ID')),
                ('username', models.SlugField(help_text='Username for the user account.', max_length=8, unique=True, validators=[django.core.validators.MinLengthValidator(limit_value=3), django.core.validators.MaxLengthValidator(limit_value=16)], verbose_name='Username')),
                ('email', models.EmailField(default=None, help_text='E-mail address for the user account.', max_length=64, null=True, validators=[django.core.validators.MinLengthValidator(limit_value=5), django.core.validators.MaxLengthValidator(limit_value=64), django.core.validators.EmailValidator()], verbose_name='E-mail Address')),
                ('first_name', models.CharField(default=None, help_text='First name for the user account.', max_length=64, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(default=None, help_text='Last name for the user account.', max_length=64, null=True, verbose_name='Last Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the user account was created.', verbose_name='Created At')),
                ('is_active', models.BooleanField(default=True, help_text='Is the user active?', verbose_name='Active?')),
                ('is_staff', models.BooleanField(default=False, help_text='Is the user staff?', verbose_name='Staff?')),
                ('is_superuser', models.BooleanField(default=False, help_text='Is the user a superuser?', verbose_name='Superuser?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'db_table': 'users',
                'db_table_comment': 'Users.',
                'ordering': ('id',),
                'managed': True,
                'default_related_name': 'user',
            },
        ),
    ]
